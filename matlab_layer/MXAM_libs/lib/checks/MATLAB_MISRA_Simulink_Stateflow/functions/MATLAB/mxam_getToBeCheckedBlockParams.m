%% Determine block parameters for misra_slsf_006
% 
% cr_items=mxam_getToBeCheckedBlockParams(cs_libs,s_filename)
% 
% get the block parameters that should be checked by misra_slsf_006_a and b
%
% Run this script once (respectively each time you change the considered
% libraries. Results will be written in a file, that is considered by
% misra_slsf_006_a.
% 
% INPUT PARAMETERS:
% =================
% cs_libs   : cell array of lib names to be checked, can also be model
% s_filename: name of file that will be generated by this function to
%             store the result, default is
%             'my_mxam_misra_slsf_006_a_checkedParameters.m'.
% 
% RETURN VALUE:
% ===============
% cs_items  : cell array of block properties and parameters
%             e.g: cs_items{1}={'blocktype','masktype',{'para1','para2','para3'}}
%                  cs_items{2}={'blocktype','masktype',{'para1','para2','para3','para4'}}
% 
% Additional: File specified by s_filename will be created.
% 
% NOTE:
% =====
% - Be careful! No safety mechanism exist, if s_filenem already exist.
%   Existing file will be overwritten. Either save results to a different 
%   file or save contents in a temp file. 
% 
% - misra_slsf_006_a and misra_slsf_006_b will only read in 
%   mxam_misra_slsf_006_checkedParameters. So use s_filename to save cell
%   array first to a different file and then - after being sure that
%   everything works as you wishes - copy and paste this cell array to 
%   mxam_misra_slsf_006_checkedParameters.
%
% PUBLISHING INFORMATION
% *************************************************************************
% Copyright:    Model Engineering Solutions
% Date:         $Date: 2020/07/31 16:03:58CEST $
% Revision:     $Rev: 15479 $
% *************************************************************************

% PRIVATE DOCUMENTATION
% -------------------------------------------------------------------------
% Author: Yongke Yu (yongke.yu@model-engineers.com)
% $Id: mxam_getToBeCheckedBlockParams.m 1.1 2020/07/31 16:03:58CEST Vojnic-Hajduk, Vladimir (vladvojn) Exp  $
% -------------------------------------------------------------------------

function cs_items=mxam_getToBeCheckedBlockParams(cs_libs,s_filename)

try
    if nargin<1
        cs_libs={'simulink'};
    end
    if nargin<2
        s_filename='my_mxam_misra_slsf_006_checkedParameters.m';
    end
    s_ver=mes_getTLVersion();
    if isempty(s_ver)
        b_tlInstalled=false;
    else
        b_tlInstalled=true;
    end
    %List of TL fields, that do not need to be checked, used in combination
    %with strfind, therefore 'comment' erased 'blockcomment', 'codecomment'
    %etc.
    blacklist = {'comment';'date';'source';'description';'unit';'scaling';'class';'type';'variable';'name';'address';...
        'InternalDataType';'StateEqScaling';'OutputEqScaling';'PropDataType';'NumBitsAllowFinal';'PropScaling';...
        'StateNameX';'StateNameDXDT';'callback';...
        'IntegratorContinuousStateAttributes';'IntegratorStateIdentifier';'IntegratorRTWStateStorageTypeQualifier';...
        'FilterContinuousStateAttributes';'FilterStateIdentifier';'FilterRTWStateStorageTypeQualifier';...
        'IntegratorContinuousStateAttributes';'IntegratorStateIdentifier';'IntegratorRTWStateStorageTypeQualifier';...
        'FilterContinuousStateAttributes';'FilterStateIdentifier';'FilterRTWStateStorageTypeQualifier';...
        'BitMask';'sw';'action';...
        'blockcomment';'comment.placement';'comment.text';'logdata.loggingmode'; 'logdata.maxnumvals'; 'logdata.plotchannels';...
        'nlogdata.loggingmode'; 'nlogdata.maxnumvals'; 'nlogdata.plotchannels';...
        'autoscaling.headroomunit'; 'autoscaling.keepoutputoffset'; 'autoscaling.keepoutputtype' ;'autoscaling.keepparamoffset'; 'autoscaling.keepparamtype';...
        'autoscaling.mode'; 'autoscaling.scalingvalid';...
        'autosar.communicationmode';'autosar.useautosarcommunication';'autosar.interrunnablevariable';'autosar.kind'; 'autosar.modeelement';...
        'codecomment';'codefile'; 'destination'; 'forceinitfunction'; 'forcerestartfunction'; 'forcereuse'; 'forcetermfunction';'linkfile';'module'; 'ownedmodules';...
        'scalingpropagation'; 'simmode'; 'map.description';'message.accessor'; 'message.component';'structvar.createstruct';'structvar.signalname';...
        'CollapseDim';'adapttablevalues';'Decimation';'DataLoggingDecimation';...
        
        'description';'hasreplaceabledataitem';'usedataitemvalue';'useddvariablevalue';'useexternaliv';'ValuesUsedBestPrec';
        'usebitmask';'replaceabledataitem';'isimplementationforsilpil'; 'isoperationcall'; 'isrunnable';...
        'arb';'inheritscaling';'show';'signalname';'interpolate';'lookupmeth';'addpoints';'arbdistance';'generatemapstruct';'extrapolate';...
        'exceptionhandling';'function';'checkmax';'checkmin';'loggingmode';'plotchannels';'outputonlytheindex';'signals';'addfilemode';'fileinfo';'visible';...
        'elements';'elementsource';'omitinitializations';'operator';'allowsignalspecification';'generatesfcn';'feedthrough';'varname';'externalreset';...
        'showsaturation';'initialconditionsource';'mode';'showelse';'inline';'circbuf';'loop';'saturate';'prodcode';...
        'dimexpr';'datastorename';'clipflag';'matkeep';'elseifexpressions';'ifexpression';'expr';'additionalarguments';'addtestframe';...
        'codecoveragelevel';'incrcodegen';'initfunctionclass';'initfunctionname';'restartfunctionclass';'restartfunctionname';...
        'stepfunctionclass';'stepfunctionname';'subsystemid';'termfunctionclass';'termfunctionname';'unscaledarguments';
        'clientport';'operation';'runnable';'softwarecomponent';'functionarglist';'search';'bounded';'blockobject';...
        'blockobject';'bounded';'integrationmethod';'dataportfordefault';'bitshiftdirection';'bitshiftnumbersource';'checkoorbitshift';...
        'diagnosticforoorshift';'clientserverport';'dataelement';'modesenderreceiverport';'operationargument';'senderreceiverport';...
        'criteria';'OutDataTypeStr';'VariableName';'lowerheadroom';'upperheadroom';...
        'output.min';'output.max';'output.offset';'output.lsb';'output.width';...
        'param.min';'param.max';'param.offset';'param.lsb';'param.width';...
        'state.min';'state.max';'state.offset';'state.lsb';'state.width';...
        'input.min';'input.max';'input.offset';'input.lsb';'input.width';...
        'gain.min';'gain.max';'gain.offset';'gain.lsb';'gain.width';...
        'table.min';'table.max';'table.offset';'table.lsb';'table.width';...
        'row.min';'row.max';'row.offset';'row.lsb';'row.width';...
        'col.min';'col.max';'col.offset';'col.lsb';'col.width';...
        'offswitch.min';'offswitch.max';'offswitch.offset';'offswitch.lsb';'offswitch.width';...
        'onswitch.min';'onswitch.max';'onswitch.offset';'onswitch.lsb';'onswitch.width';...
        'threshold.min';'threshold.max';'threshold.offset';'threshold.lsb';'threshold.width';...
        'work.min';'work.max';'work.offset';'work.lsb';'work.width';...
        'fraction.min';'fraction.max';'fraction.offset';'fraction.lsb';'fraction.width';...
        'denom.min';'denom.max';'denom.offset';'denom.lsb';'denom.width';...
        'amatrix.min';'amatrix.max';'amatrix.offset';'amatrix.lsb';'amatrix.width';...
        'num.min';'num.max';'num.offset';'num.lsb';'num.width';...
        'coeff.min';'coeff.max';'coeff.offset';'coeff.lsb';'coeff.width';...
        'bmatrix.min';'bmatrix.max';'bmatrix.offset';'bmatrix.lsb';'bmatrix.width';...
        'bmatrix.min';'bmatrix.max';'bmatrix.offset';'bmatrix.lsb';'bmatrix.width';...
        'index.min';'index.max';'index.offset';'index.lsb';'index.width';...
        'fslewrate.min';'fslewrate.max';'fslewrate.offset';'fslewrate.lsb';'fslewrate.width';...
        'lowerlimit.min';'lowerlimit.max';'lowerlimit.offset';'lowerlimit.lsb';'lowerlimit.width';...
        'upperlimit.min';'upperlimit.max';'upperlimit.offset';'upperlimit.lsb';'upperlimit.width';...
        'rslewrate.min';'rslewrate.max';'rslewrate.offset';'rslewrate.lsb';'rslewrate.width';...
        'dmatrix.min';'dmatrix.max';'dmatrix.offset';'dmatrix.lsb';'dmatrix.width';...
        'cmatrix.min';'cmatrix.max';'cmatrix.offset';'cmatrix.lsb';'cmatrix.width';...
        'scalar';'ndims';'output.tolerance';'gain.tolerance';...
        'input.distance';'col.distance';'col.x0';'col.xn';'row.distance';'row.value';'row.x0';'row.xn';...
        'input.x0';'input.xn';'dataportorder';...
        %'min';'max';'offset';'width';'lsb';...
        };
    cs_blockmasktype={};
    cs_items={};
    for k=1:numel(cs_libs)
        load_system(cs_libs{k});
        %get all blocks
        lh_blocks = find_system(cs_libs{k}, 'LookUnderMasks',  'all' , 'FollowLinks','off', 'findall', 'on', 'type','block');
        [lh_blocks,r_stats]=mes_periprocess(lh_blocks,[]);
        
        for i=1:length(lh_blocks)
            
            curBlock = lh_blocks(i);
            masktype=get_param(curBlock,'masktype');
            blocktype=get_param(curBlock,'blocktype');
            if strcmpi(blocktype,'abs')
                aaa=1;
            end
            if strcmpi(blocktype,'subsystem')&& isempty(masktype)
                continue;
            end
            
            s_maskblocktype=[blocktype '_' masktype];
            if ismember(s_maskblocktype,cs_blockmasktype)
                continue;
            else
                cs_blockmasktype{end+1}=s_maskblocktype;
            end
            
            name = get_param(curBlock,'name');
            
            pos = strfind(lower(name),'help');
            if isempty(pos)
                pos = strfind(lower(name),'version');
                if isempty(pos)
                    pos = strfind(lower(name),'doc');
                    if isempty(pos)
                        pos = strfind(lower(name),'doku');
                        if(isempty(pos))
                            pos = strfind(lower(name),'info');
                        end
                    end
                end
            end
            
            if ~isempty(pos)
                continue;
            end
            % In this if-condition, all Parameter Values of this block are
            % collected - depending on type of block.
            % ===============================================================
            if strncmp(get(curBlock,'MaskType'),'TL_',3)&& b_tlInstalled %CASE: TL Block
                
                if strcmp(get(curBlock,'masktype'),'TL_MainDialog')
                    continue
                end
                
                parNames = tl_get(curBlock);
                ind2erase =[];
                for j=1:length(parNames)
                    
                    %get the current parameter name
                    curParName = parNames{j};
                    
                    %exclude several parameters, which do not give the
                    %possibility to enter tuneable parameters or which
                    %parameters do not eva an operation
                    cs_parnames=mes_splitstring(curParName,'.',false);
                    
                    if ismember(curParName,blacklist)||ismember(cs_parnames{end},blacklist)
                        ind2erase(end+1,1) = j;
                        continue;
                    end
                end
                parNames(ind2erase)=[];
            else %CASE SL Block
                %get all possible fields, where users might enter something
                if strcmp(get(curBlock,'blocktype'),'Reference')
                    continue
                end
                
                dlgPar = get(curBlock,'DialogParameters');
                if isempty(dlgPar)
                    continue
                end
                
                parNames = fieldnames(dlgPar); %extract all the fieldnames
                
                %eliminate fields, in which user cannot enter anything
                toerase = [];
                for j=1:length(parNames)
                    if (~strcmp(eval(['dlgPar.' parNames{j} '.Type']),'string')) || ...
                            (strcmp(eval(['dlgPar.' parNames{j} '.Type']),'string') && ...
                            ~ismember('read-write',eval(['dlgPar.' parNames{j} '.Attributes'])))
                        toerase(end+1,1) = j;
                    else
                        cs_parnames=mes_splitstring(parNames{j},'.',false);
                        if ismember(parNames{j},blacklist)||ismember(cs_parnames{end},blacklist)
                            toerase(end+1,1) = j;
                        end
                    end
                end
                parNames(toerase) = [];
            end
            if ~isempty(parNames)
                if size(parNames,1)>1
                    parNames=parNames';
                end
                cs_items{end+1}={blocktype, masktype,parNames};
            end
        end
    end
    fid=fopen(s_filename,'w');
    if fid==-1
        error(['Can not open file:' s_fileame '.']);
    else
        fwrite(fid,['function cs_items=mxam_misra_slsf_006_a_checkedParameters()' char(10)]);
        fwrite(fid, ['cs_items={... ' char(10)]);
        for i=1:length(cs_items)
            fwrite(fid, ['{''' cs_items{i}{1} ''' ''' cs_items{i}{2} ''' ' '{'] );
            for j=1:length(cs_items{i}{3})
                fwrite(fid, ['''' cs_items{i}{3}{j} ''' ']);
            end
            fwrite(fid, ['}};...' char(10)]);
        end
        fwrite(fid, '};');
    end
    fclose(fid);
catch %#ok<CTCH>
    le=lasterror; %#ok<LERR>
    result=['error in ' mes_shortErrorLocationString(le,1)];
end
function C = flatten(A)
%
% C1 = flatten({{1 {2 3}} {4 5} 6})
% C2 = flatten({{'a' {'b','c'}} {'d' 'e'} 'f'})
%
% Outputs:
% C1 =
%     [1]    [2]    [3]    [4]    [5]    [6]
% C2 =
%     'a'    'b'    'c'    'd'    'e'    'f'
%
% Copyright 2010  The MathWorks, Inc.
C = {};
for i=1:numel(A)
    if(~iscell(A{i}))
        C = [C,A{i}]; %#ok<AGROW>
    else
        Ctemp = flatten(A{i});
        C = [C,Ctemp{:}]; %#ok<AGROW>
    end
end