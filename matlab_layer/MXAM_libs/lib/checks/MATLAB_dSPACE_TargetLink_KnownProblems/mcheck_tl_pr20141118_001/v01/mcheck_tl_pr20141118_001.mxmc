<check fileVersion="2">
  <uid>037d186a-79af-4ba8-be0f-5a46cc476cf3</uid>
  <id>mcheck_tl_pr20141118_001</id>
  <version>1</version>
  <status>proposed</status>
  <preVersionUid></preVersionUid>
  <author username="Model Engineering Solutions GmbH" domain="MES" email="mxam@model-engineers.com"/>
  <coAuthors/>
  <copyright>Model Engineering Solutions GmbH</copyright>
  <reviewers/>
  <templateUid>206e6a94-528a-7a2a-a982-901a9fd65b09</templateUid>
  <title>Preceding Blocks of Merge Blocks</title>
  <adapter version="2.3">com.modelengineers.mxam.tooladapter.matlab</adapter>
  <executable>mes_tl_pr20141118_001.m</executable>
  <repairOption>false</repairOption>
  <timeConsuming>false</timeConsuming>
  <properties>
    <enumeration name="Compiled Model Required" optional="false" private="false" multi="false">
      <description>Indicates whether the check needs a compiled model.</description>
      <enums>
        <value>no</value>
      </enums>
    </enumeration>
    <enumeration name="TargetLink Required" optional="false" private="false" multi="false">
      <description>Indicates whether this check requires a TargetLink installation or not.</description>
      <enums>
        <value>yes</value>
      </enums>
    </enumeration>
    <enumeration name="Model Root Required" optional="false" private="false" multi="false">
      <description>Indicates whether this check analyses up from the model root.</description>
      <enums>
        <value>no</value>
      </enums>
    </enumeration>
    <string name="MATLAB Versions" optional="true" private="false">
      <description>Related MATLAB versions</description>
      <value>all</value>
    </string>
    <string name="TargetLink Versions" optional="true" private="false">
      <description>Related TargetLink versions</description>
      <value>3.0, 3.0.1, 3.1, 3.2, 3.3, 3.4, 3.5, 4.0, 4.1</value>
    </string>
    <string name="Embedded Coder Versions" optional="true" private="false">
      <description>Related Embedded Coder versions</description>
      <value>not applicable</value>
    </string>
    <richtext name="Pass-Fail Criteria" optional="false" private="false">
      <description>This is a detailed description of the pass and fail criteria.</description>
      <value><![CDATA[<p> The check analyzes each block x that is part of the connection between an input port of a TargetLink Merge block and the output port of a conditionally executed subsystem or a Stateflow chart. </p> 
<ul> 
 <li> Failed: the type of block x is one of the following 
  <ul> 
   <li> TargetLink Inport block </li> 
   <li> TargetLink Outport block </li> 
   <li> TargetLink Bus Inport block </li> 
   <li> TargetLink Bus Outport block </li> 
  </ul> </li> 
</ul> 
<p> The check issues a pass if the failed case does not apply. </p>]]></value>
    </richtext>
    <richtext name="Technical Notes" optional="true" private="false">
      <description>Important notes concerning the implementation of the check.</description>
      <value></value>
    </richtext>
    <richtext name="Solution" optional="false" private="false">
      <description>A solution for the user to repair faulty elements.</description>
      <value><![CDATA[<p> If possible avoid the use of the blocks listed above in the described situation. </p> 
<p> Or if the behavior of SIL/PIL-Simulation is acceptable for you, you can instead adapt the behavior of the MIL-Simulation to the behavior SIL/PIL-Simulation placing a computing block in the signal line between the output of the system/chart and the input of the Merge block. If the signal is a non-bus signal you can use a Rescaler block (available since TargetLink 3.0) or a Gain block with the gain value 1. If the signal is a bus signal you can use a TargetLink Bus Outport resp. an enhanced Outport block for this purpose (wrapped in another subsystem) </p>]]></value>
    </richtext>
    <richtext name="Repair Action" optional="false" private="false">
      <description>How the check automatically repairs faulty elements.</description>
      <value><![CDATA[<p> No repair action available. </p>]]></value>
    </richtext>
    <richtext name="Example" optional="true" private="false">
      <description>Example of how the check functions.</description>
      <value></value>
    </richtext>
    <richtext name="Prerequisites" optional="true" private="false">
      <description>Prerequisites of the model for the check to function properly.</description>
      <value></value>
    </richtext>
  </properties>
  <parameterSpecifications/>
  <parameterReferences/>
  <history/>
</check>