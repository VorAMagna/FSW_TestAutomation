<check fileVersion="2">
  <uid>d8939a44-2e95-44e5-a2ee-88c0447a6350</uid>
  <id>mcheck_sdt_sc007_a</id>
  <version>1</version>
  <status>proposed</status>
  <preVersionUid></preVersionUid>
  <author username="Model Engineering Solutions GmbH" domain="MES" email="mxam@model-engineers.com"/>
  <coAuthors/>
  <copyright>Model Engineering Solutions GmbH</copyright>
  <reviewers/>
  <templateUid>206e6a94-528a-7a2a-a982-901a9fd65b09</templateUid>
  <title>Definition TargetLink Function Interface - Inports</title>
  <adapter version="2.3">com.modelengineers.mxam.tooladapter.matlab</adapter>
  <executable>mes_sdt_sc007_a.m</executable>
  <repairOption>false</repairOption>
  <timeConsuming>false</timeConsuming>
  <properties>
    <enumeration name="Compiled Model Required" optional="false" private="false" multi="false">
      <description>Indicates whether the check needs a compiled model.</description>
      <enums>
        <value>no</value>
      </enums>
    </enumeration>
    <enumeration name="TargetLink Required" optional="false" private="false" multi="false">
      <description>Indicates whether this check requires a TargetLink installation or not.</description>
      <enums>
        <value>yes</value>
      </enums>
    </enumeration>
    <enumeration name="Model Root Required" optional="false" private="false" multi="false">
      <description>Indicates whether this check analyses up from the model root.</description>
      <enums>
        <value>no</value>
      </enums>
    </enumeration>
    <string name="MATLAB Versions" optional="true" private="false">
      <description>Related MATLAB versions</description>
      <value>all</value>
    </string>
    <string name="TargetLink Versions" optional="true" private="false">
      <description>Related TargetLink versions</description>
      <value><![CDATA[>=2.0]]></value>
    </string>
    <string name="Embedded Coder Versions" optional="true" private="false">
      <description>Related Embedded Coder versions</description>
      <value>irrelevant</value>
    </string>
    <richtext name="Pass-Fail Criteria" optional="false" private="false">
      <description>This is a detailed description of the pass and fail criteria.</description>
      <value><![CDATA[<p> The check inspects TargetLink inports and bus inports of each TargetLink function whose class is set to &quot;FCN_ARG&quot;, &quot;FCN_REF_ARG&quot; or &quot;FCN_RETURN&quot;. The data type, scaling (LSB and Offset) and value range of each TargetLink inport is compared with its source block. </p> 
<p> While determining the data type of the destination block type inheritance is considered as well. </p> 
<p> The following criteria are sequentially checked for each TargetLink inport. If any one criterion does not hold, that inport and its source block are declared as failed or a warning is issued. After an erroneous criterion is detected, the remaining criteria are not further analyzed on that port and its source block.<br /> </p> 
<ul> 
 <li> Failed 1: The Inport is not connected to a source block. </li> 
 <li> Failed 2: Matching Output port of Stateflow chart (source block) not found. </li> 
 <li> Failed 3: TargetLink data type is not set for the Inport or its source. </li> 
 <li> Failed 4: The base type of the TargetLink data type of the Inport or its source is not defined. </li> 
 <li> Failed 5: The base type of the Inport and its source are different. </li> 
 <li> Failed 6: The LSB value of the Inport and its source are different. </li> 
 <li> Failed 7: The offsets (biases) of the Inport and its source differ. </li> 
 <li> Failed 8: The LSB types (power of two vs. arbitrary) of the Inport and its source are different. </li> 
 <li> Failed 9: The user-defined value range constraints (&quot;minimum&quot; and/or &quot;maximum&quot;) of the Inport and its source are different. Set the check parameter SDT.sc007_a.IgnoreUndefinedRanges to &quot;true&quot; to ignore this criterion. </li> 
 <li> Failed 10: The TargetLink function is configured as scaling invariant but the scaling propagation function is not defined in the scaling propagation edit field. </li> 
 <li> Warning: The source block does not support TargetLink data types. Use the check parameter SDT.sc007_a.IgnoreNonTLSources to deactivate this finding. </li> 
</ul> 
<p> Note: TargetLink functions are subsystems which contain a TargetLink Function block. </p>]]></value>
    </richtext>
    <richtext name="Technical Notes" optional="true" private="false">
      <description>Important notes concerning the implementation of the check.</description>
      <value><![CDATA[<ol> 
 <li> For each block, only the first deviation which has been found is reported. Re-run the check after having repaired the deviation to make sure that no further deviations are present. </li> 
 <li> If the TargetLink function is declared to be scaling invariant, the check evaluates the given scaling propagation function. However, it does not assess its functionality.<br /> </li> 
 <li> The check needs to set the model into compiled mode to access the data type of the TargetLink port and its source block(Simulink / TargetLink), if the data type is not available in the block property dialog. Therefore, the check only compiles the model on demand. </li> 
</ol>]]></value>
    </richtext>
    <richtext name="Solution" optional="false" private="false">
      <description>A solution for the user to repair faulty elements.</description>
      <value><![CDATA[Adjust the diverging signal properties accordingly. Please note that adjusting the data type of a source block may require further, secondary adjustments involving other blocks. In this case, re-run the check.
<br /> 
<ul> 
 <li> Solution 1: Connect the Inport to a suitable source block.&nbsp; </li> 
 <li> Solution 2: Adjust the properties of the Stateflow chart. </li> 
 <li> Solution 3: Specify a suitable TargetLink data type for the Inport or its source. </li> 
 <li> Solution 4: Specify a suitable base type for the Inport or its source. </li> 
 <li> Solution 5: Match the base types of the Inport and its source. </li> 
 <li> Solution 6: Match the LSB values of the Inport and its source. </li> 
 <li> Solution 7: Match the offsets of the Inport and its source. </li> 
 <li> Solution 8: Match the LSB types of the Inport and its source. </li> 
 <li> Solution 9: Match the range constraints of the Inport and its source. </li> 
 <li> Solution 10: Review the implementational specifications of the source block. </li> 
</ul>Add known range limits to the &quot;min&quot; and &quot;max&quot; values of the TargetLink and Stateflow output variables, whenever possible. Do not use the inheritance mechanism for the size and type of Stateflow data if you are working with TargetLink versions &lt; 2.2. 
<p> <br /> </p> 
<p> <br /> </p>]]></value>
    </richtext>
    <richtext name="Repair Action" optional="false" private="false">
      <description>How the check automatically repairs faulty elements.</description>
      <value>No automatic repair action available.</value>
    </richtext>
    <richtext name="Example" optional="true" private="false">
      <description>Example of how the check functions.</description>
      <value></value>
    </richtext>
    <richtext name="Prerequisites" optional="true" private="false">
      <description>Prerequisites of the model for the check to function properly.</description>
      <value>TargetLink 2.0 or higher must be installed. A TargetLink license is not needed for running the check, but hyperlinks to open a faulty TargetLink block require a valid TargetLink license.</value>
    </richtext>
  </properties>
  <parameterSpecifications>
    <specification type="boolean">
      <name>SDT.sc007_a.IgnoreNonTLSources</name>
      <description>If set to true, Simulink source blocks that are allowed to be used with TargetLink are not listed in the report. If set to false, the use of these Simulink source blocks raises a note (see point no. 10 in the check description).</description>
      <defaultValue>false</defaultValue>
    </specification>
    <specification type="boolean">
      <name>SDT.sc007_a.IgnoreTLDefaultDataTypes</name>
      <description><![CDATA[This parameter determines whether a TargetLink source block with a default class and/or unspecified data type/base type is ignored (parameter is set to true) or not ignored (parameter is set to false).
This applies to TargetLink Constants and Merge blocks whose output class is set to "default". Here, the datatype is specified by TargetLink at run-time/build-time. 
In MIL mode, the output data type of these blocks is set to int16. In SIL mode, the data type is adjusted to match the succeeding block.]]></description>
      <defaultValue>false</defaultValue>
    </specification>
    <specification type="boolean">
      <name>SDT.sc007_a.IgnoreUndefinedRanges</name>
      <description>If set to true, only those ranges are checked for consistency that are defined. 
If set to false, the check considers a pair of ranges to be inconsistent, if at least one range is not defined.</description>
      <defaultValue>false</defaultValue>
    </specification>
    <specification type="string">
      <name>SDT.sc007_a.ValidBaseTypeCombinations</name>
      <description><![CDATA[Use the following format to specify each allowed pair of base types.
{<source base type 1>, <inport base type 1>;<source base type 2>, <inport base type 2>; ... }

The specification of  {'Int16','UInt8'}  states that if the data type of an Inport is defined with base type UInt8, the data type of its source block should be defined with base type Int16 or UInt8.]]></description>
      <defaultValue><![CDATA[{'Int16','UInt8';...
'Int32','UInt16'}]]></defaultValue>
    </specification>
  </parameterSpecifications>
  <parameterReferences/>
  <history>
    <record timestamp="12/04/2015 13:06:10">
      <author username="Model Engineering Solutions GmbH" domain="MES" email="mxam@model-engineers.com"/>
      <comment>Status changed from [DRAFT] to [PROPOSED]. </comment>
    </record>
  </history>
</check>