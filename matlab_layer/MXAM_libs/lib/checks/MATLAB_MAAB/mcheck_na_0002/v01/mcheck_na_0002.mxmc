<check fileVersion="2">
  <uid>29081d4f-ae9a-4f89-9cfa-c955daa698f6</uid>
  <id>mcheck_na_0002</id>
  <version>1</version>
  <status>released</status>
  <preVersionUid></preVersionUid>
  <author username="Model Engineering Solutions GmbH" domain="MES" email="mxam@model-engineers.com"/>
  <coAuthors/>
  <copyright></copyright>
  <reviewers/>
  <templateUid>206e6a94-528a-7a2a-a982-901a9fd65b09</templateUid>
  <title>Appropriate Implementation of Fundamental Logical and Numerical Operations</title>
  <adapter version="2.3">com.modelengineers.mxam.tooladapter.matlab</adapter>
  <executable>mes_na_0002.m</executable>
  <repairOption>false</repairOption>
  <timeConsuming>false</timeConsuming>
  <properties>
    <enumeration name="Compiled Model Required" optional="false" private="false" multi="false">
      <description>Indicates whether the check needs a compiled model.</description>
      <enums>
        <value>no</value>
      </enums>
    </enumeration>
    <enumeration name="TargetLink Required" optional="false" private="false" multi="false">
      <description>Indicates whether this check requires a TargetLink installation or not.</description>
      <enums>
        <value>no</value>
      </enums>
    </enumeration>
    <enumeration name="Model Root Required" optional="false" private="false" multi="false">
      <description>Indicates whether this check analyses up from the model root.</description>
      <enums>
        <value>no</value>
      </enums>
    </enumeration>
    <string name="MATLAB Versions" optional="true" private="false">
      <description>Related MATLAB versions</description>
      <value>all</value>
    </string>
    <string name="TargetLink Versions" optional="true" private="false">
      <description>Related TargetLink versions</description>
      <value>all</value>
    </string>
    <string name="Embedded Coder Versions" optional="true" private="false">
      <description>Related Embedded Coder versions</description>
      <value>all</value>
    </string>
    <richtext name="Pass-Fail Criteria" optional="false" private="false">
      <description>This is a detailed description of the pass and fail criteria.</description>
      <value><![CDATA[The check analyzes the input data type of selected blocks in the model.
<br /> 
<ul> 
 <li> Failed 1: The block requires a boolean signal as input, but its source block outputs a numerical signal. </li> 
 <li> Failed 2: The block requires a numerical signal as input, but its source block outputs a boolean signal. </li> 
 <li> Review 1: The block requires a boolean or numerical signal as input, but its source block outputs an enumerated signal. </li> 
 <li> Review 2: The block could not be checked because the output data type of its source could not be evaluated. See Technical Notes for more information. </li> 
</ul>The check result is passed if all failed cases do not apply.
<br />]]></value>
    </richtext>
    <richtext name="Technical Notes" optional="true" private="false">
      <description>Important notes concerning the implementation of the check.</description>
      <value><![CDATA[<ol> 
 <li> When the model configuration parameter setting 'Implement logic signals as boolean data (vs. double)' is checked, Flip Flop blocks require a boolean signal for each inport. If this is the case, all flip flop blocks are implicitly added to check parameter MAAB.na_0002.BlocksRequiringBooleanInput. </li> 
 <li> The check might try to compile the model if necessary to identify the data type.<br /> </li> 
</ol>]]></value>
    </richtext>
    <richtext name="Solution" optional="false" private="false">
      <description>A solution for the user to repair faulty elements.</description>
      <value><![CDATA[<ul> 
 <li> Solution 1: Avoid the use of numerical signals to blocks that require a boolean input. </li> 
 <li> Solution 2: Avoid the use of boolean signals to blocks that require a numerical input. </li> 
 <li> Solution 3: Review the block according to the guideline.<br /> </li> 
 <li> Solution 4:&nbsp;Review the block according to the guideline, or make the model compileable and run the check again.<br /> </li> 
</ul>]]></value>
    </richtext>
    <richtext name="Repair Action" optional="false" private="false">
      <description>How the check automatically repairs faulty elements.</description>
      <value><![CDATA[<p> No automatic repair action available. </p>]]></value>
    </richtext>
    <richtext name="Example" optional="true" private="false">
      <description>Example of how the check functions.</description>
      <value></value>
    </richtext>
    <richtext name="Prerequisites" optional="true" private="false">
      <description>Prerequisites of the model for the check to function properly.</description>
      <value></value>
    </richtext>
  </properties>
  <parameterSpecifications>
    <specification type="string">
      <name>MAAB.na_0002.BlocksRequiringBooleanInput</name>
      <description><![CDATA[The cell array consists of three colums. Each row defines the property of a block (and the corresponding portnumber) that require a boolean input.
First column:   Block property name. Allowed values: 'blocktype', 'masktype' or 'maskdescription'.
Second column:  Block property value (e.g. 'Switch').
Third column:  Port identification. Allowed values: port numbers (e.g. '1 3'), 'all' (considers all inports), 'enable', 'trigger' and 'ifaction'.

Example :
This entry defines that inport 2 of Switch blocks requires a boolean input.
{'blocktype','Switch','inport','2'}]]></description>
      <defaultValue><![CDATA[{'blocktype','Logic','all';...
        'blocktype','Switch','2';...
        'blocktype','CombinatorialLogic','1';...
        'masktype','DFlipFlop','1';...
        'masktype','TL_DFlipFlop','1';...
        'masktype','DLatch','1';...
        'masktype','TL_DLatch','1';...
        'masktype','JKFlipFlop','1 3';...
        'masktype','TL_JKFlipFlop','1 3';...
        'masktype','SRFlipFlop','1 2';...
        'masktype','TL_SRFlipFlop','1 2'}]]></defaultValue>
    </specification>
    <specification type="string">
      <name>MAAB.na_0002.BlocksRequiringNumericalInput</name>
      <description><![CDATA[The cell array consists of three colums. Each row defines the property of a block (and the corresponding portnumber) that requires a numerical input.
First column:   Block property name. Allowed values: 'blocktype', 'masktype' or 'maskdescription'.
Second column:  Block property value (e.g. 'Switch').
Third column:  Port identification. Allowed values: port numbers (e.g. '1 3'), 'all' (considers all inports), 'enable', 'trigger' and 'ifaction'.

Example :
This entry defines that all inports of Sum blocks require a numerical input.
{'blocktype' 'Sum' 'inport' 'all'}]]></description>
      <defaultValue><![CDATA[{'blocktype','Derivative','1';...
'blocktype','Integrator','1';...
'blocktype','SecondOrderIntegrator','1';...
'blocktype','StateSpace','1';...
'blocktype','TransferFcn','1';...
'blocktype','ZeroPole','1';...
'blocktype','Backlash','1';...
'masktype','Coulombic and Viscous Friction','1';...
'masktype','Dead Zone Dynamic','1 2 3';...
'blocktype','DeadZone','1';...
'blocktype','HitCross','1';...
'blocktype','Quantizer','1';...
'masktype','Rate Limiter Dynamic','1 2 3';...
'blocktype','RateLimiter','1';...
'blocktype','Relay','1';...
'blocktype','Saturate','1';...
'masktype','Saturation Dynamic','1 2 3';...
'masktype','Wrap To Zero','1';...
'masktype','Difference','1';...
'masktype','Discrete Derivative','1';...
'blocktype','DiscreteFilter','1';...
'blocktype','DiscreteFir','all';...
'blocktype','DiscreteIntegrator','all';...
'blocktype','DiscreteStateSpace','1';...
'blocktype','DiscreteTransferFcn','1';...
'blocktype','DiscreteZeroPole','1';...
'masktype','First Order Transfer Fcn','1';...
'masktype','First-Order Hold','1';...
'masktype','Lead or Lag Compensator','1';...
'masktype','PID 1dof','all';...
'masktype','PID 2dof','all';...
'masktype','Transfer Fcn Real Zero','1';...
'masktype','Compare To Constant','1';...
'masktype','Compare To Zero','1';...
'masktype','Detect Change','1';...
'masktype','Detect Decrease','1';...
'masktype','Detect Fall Negative','1';...
'masktype','Detect Fall Nonpositive','1';...
'masktype','Detect Increase','1';...
'masktype','Detect Rise Nonnegative','1';...
'masktype','Detect Rise Positive','1';...
'masktype','Interval Test','1';...
'masktype','Interval Test Dynamic','1 2 3';...
'blocktype','Interpolation_n-D','all';...
'blocktype','LookupNDDirect','all';...
'blocktype','Lookup_n-D','all';...
'blocktype','PreLookup','all';...
'masktype','Sine and Cosine','1';...
'blocktype','Abs','1';...
'masktype','Algebraic Constraint','1';...
'blocktype','Bias','1';...
'blocktype','ComplexToMagnitudeAngle','1';...
'blocktype','ComplexToRealImag','1';...
'blocktype','DotProduct','1';...
'blocktype','Gain','1';...
'blocktype','MagnitudeAngleToComplex','all';...
'blocktype','Math','all';...
'blocktype','MinMax','all';...
'masktype','MinMax Running Resettable','1 2';...
'blocktype','Polyval','1';...
'blocktype','Product','all';...
'blocktype','RealImagToComplex','all';...
'blocktype','Rounding','all';...
'blocktype','SampleTimeMath','1';...
'blocktype','Signum','1';...
'blocktype','Sin','all';...
'masktype','Slider Gain','all';...
'blocktype','Sqrt','1';...
'blocktype','Sum','all';...
'blocktype','Trigonometry','1';...
'blocktype','UnaryMinus','1';...
'masktype','Decrement Time To Zero','1';...
'masktype','Decrement To Zero','1';...
'masktype','Fixed-Point State-Space','1';...
'masktype','Real World Value Decrement','1';...
'masktype','Real World Value Increment','1';...
'masktype','Stored Integer Value Decrement','1';...
'masktype','Stored Integer Value Increment','1';...
'masktype','Transfer Fcn Direct Form II','1';...
'masktype','Transfer Fcn Direct Form II Time Varying','1 2 3';...
'masktype','Discrete Transfer Function with Initial Outputs','1';...
'masktype','Discrete Transfer Function with Initial States','1';...
'masktype','Discrete Zero-Pole with Initial Outputs','1';...
'masktype','Discrete Zero-Pole with Initial States','1';...
'masktype','IdealADC','1';...
'masktype','State-Space with Initial Outputs','1';...
'masktype','Transfer Function with Initial Outputs','1';...
'masktype','Transfer Function with Initial States','1';...
'masktype','Zero-Pole with Initial Outputs','1';...
'masktype','Zero-Pole with Initial States','1';...
'masktype', 'Derivative for linearization', '1';...
'masktype','Cart2Polar','1 2';...
'masktype','Cart2Sph','1 2 3';...
'masktype','CelsiusToFahrenheit','1';...
'masktype','DegreesToRadians','1';...
'masktype','FahrenheitToCelsius','1';...
'masktype','Polar2Cart','1 2';...
'masktype','RadiansToDegrees','1';...
'masktype','Sph2Cart','1 2 3'}]]></defaultValue>
    </specification>
  </parameterSpecifications>
  <parameterReferences/>
  <history>
    <record timestamp="12/04/2014 11:22:47">
      <author username="Model Engineering Solutions GmbH" domain="MES" email="mxam@model-engineers.com"/>
      <comment>Check modified by MXAM 1 importer.</comment>
    </record>
    <record timestamp="02/16/2018 11:29:00">
      <author username="Model Engineering Solutions GmbH" domain="MES" email="support@model-engineers.com"/>
      <comment>Status changed from [PROPOSED] to [RELEASED]. </comment>
    </record>
  </history>
</check>