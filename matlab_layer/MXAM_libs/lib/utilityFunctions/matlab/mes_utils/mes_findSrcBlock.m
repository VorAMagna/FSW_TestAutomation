%% [r_srcInfo,lh_checkedBlocks] = mes_findSrcBlock(x_block,inport,r_options)
%
% DESCRIPTION:
% ============
% This function returns the source block to which the <inport> of <x_block>
% is connected. The source signal will be tracked until one of the following
% blocks is found:
%
%  - a block generating a new signal, e.g., a TL block (except Merge, Data Store Read, Assignment), 
%    top-level Inport, Ground, Constant, logical or arithmetic block, Stateflow Chart, FlipFlops, SignalBuilder, etc.
%  - a TL Port: TL Inport, TL Outport, TL BusOutport, TL BusInport
%  - an unconnected block
%  - a Concatenate Block    Q: why not trace through this block as in the Mux case?
%  - a DataStoreMemory block
%  - a block that fulfills <r_options.s_stopBlockCond>
%  - a BusCreator or Mux block provided no bus/vector elements are specified, i.e., the following conditions are all fulfilled: 
%     (i)   <r_options.signalName> is empty 
%     (ii)  <r_options.li_muxVecInd> == -1
%  - a BusAssignment block provided the following conditions are all fulfilled:  
%     (i)   <r_options.signalName> is empty 
%     (ii)  the input bus has more than one element 
%     (iii) li_muxVecInd is not specified
%  - a DataTypeConversion block in each of the following cases: 
%     (i)   TL Rescaler Q: why stop at TL Rescaler in SL system?
%     (ii)  block is not in a TL system 
%     (iii) TL is not installed
%
% INPUT PARAMETERS:
% =================
% - x_block:       Path or handle of the selected block
% - inport:        Tracked inport of x_block. Default value = 1.
%                  Other possible values:
%                  - inport number
%                  - identifier string: 'Enable','Trigger','State','Ifaction'
% - r_options:     Struct with the following fields:
%   - .s_lookUnderMasks: value to be used in find_system 
%                     - 'none'
%                     - 'graphical'
%                     - 'functional'
%                     - 'all'
%                     default-value: 'none'
%   - .signalName:    String or cell array of strings that contains the name
%                     of the bus element to trace through a Mux/BusCreator/BusAssignment block.
%                     default value: empty 
%                     Example:
%                     - If a TL Bus Inport is the found source of a searched 
%                       bus element, the return variable .cs_outputSigName 
%                       will contain the components of the signal name. 
%                       Then .cs_outputSigName can be given to this function 
%                       in .signalName to further search the source of this signal.
%                     - 'signal1', {'signal1','signal2'}, see cs_outputSigName.
%   - .li_muxVecInd: List of vector indices of the muxed signal to be traced.
%                    If specified, mes_findSrcBlock traces the common source
%                    of the specified signal vector through Mux/BusCreator/BusAssignment blocks if possible.
%                    Example:
%                    - -1: the common source of the whole vector signal 
%                          is searched
%                    - [2 4]: the common source of signals no. 2 and 4 of 
%                             the signal vector is traced
%                    -  3: signal no. 3 of the signal vector is traced
%   - .s_stopBlockCond: String with block type or code. If a found block
%                    fulfills this stopping condition, it is returned as 
%                    source.
%                    If code is used, it must be evaluable and contain the
%                    keyword '#hblock'. The string will be evaluated at
%                    runtime, where #hblock represents the current found 
%                    source handle. If the result is true, the current found block 
%                    will be returned as source.
%                    Note: 
%                    If the original input block fulfills the stopping cond, 
%                    this function will not stop, but continue to search.
%                    Examples:
%                    - strcmpi(get_param(#hblock,'blocktype'),'myblocktype')
%                    - ismember(get_param(#hblock,'masktype'),{'aaa','bbb'})
%   - .b_dispTLmessOnUnconnectedBlocks:
%                    true:    if an unconncected inport was found, then
%                             a TargetLink message is created and the TL 
%                             message browser is opened.
%                    false:   no message is shown
%                    default: mesvar_DebugInfo
%   - .b_debug:      true:    display debug infos
%                    false:   do not display debug infos
%                    default: mesvar_DebugInfo
%
% RETURN VALUES:
% ==============
% - r_srcInfo:           Struct with the following fields:
%   - .h_srcBlock:       > 0 : handle of the found source block
%                        - 1 : x_block is not connected or source cannot be found
%   - .i_srcOutPortNo:   Port number of the outport of the source block
%                        (zero-based), or -1, if not available.
%   - .cs_outputSigName: Cell array of strings.
%                        If the search passes a bus OR if it stops 
%                        at a Mux (and r_options.signalName was given), 
%                        it contains the components of the signal name.
%                        Otherwise, it is empty.
%                        Example:
%                        {'signal1','signal2'} means that the name of the
%                        output signal is 'signal1.signal2'.
%   - .cs_passedSubsys:  Subsystems that the source signal passes through
%   - .h_lastSrc:        Last source block during the search process
%   - .i_lastSrcPort:    Outport number of the last source block (zero based)
%   - .s_message:        String for error messages, e.g. invalid port number
%   - .li_muxVecInd:     List of vector indices of muxed signal that was traced.
% - lh_checkedblocks:    List of handles of the blocks that have been
%                        analyzed but not identified as the source of x_block.                        
%
% EXAMPLES:
% =========
%   r_srcInfo = mes_findSrcBlock(h_block);
%   r_options.li_muxVecInd = [2 5];
%   r_options.s_stopBlockCond = 'Subsystem';
%   r_srcInfo = mes_findSrcblock(h_block,1,r_options);
%
%   How to use the function in checks:
%    [...]
%    r_srcInfo = mes_findSrcBlock(h_block);
%    if ~ishandle(r_srcInfo.h_srcBlock)
%        <error handling>
%    end
%    [...]
%
% PUBLISHING INFORMATION
% ****************************************************************
% Copyright:  Model Engineering Solutions
% ****************************************************************

function [r_srcInfo,lh_checkedBlocks] = mes_findSrcBlock(x_block,x_inport,r_options)












































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































